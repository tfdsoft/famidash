MEMORY {
#RAM Addresses:
    # Zero page
    ZP: start = $00, size = $100, type = rw, define = yes, file = "";
		
	RAM:        start = $0320, size = $03E0, define = yes, file = "";
    C_STACK:    start = $0300, size = $0020, define = yes, file = "";
	OAM_BUF:    start = $0200, size = $0100, define = yes, file = "";
    PAL_BUF:    start = $0180, size = $0040, define = yes, file = "";
    VRAM_BUF:   start = $0700, size = $0100, define = yes, file = "";

    WRAM:       start = $6000, size = $2000, define = yes, file = "";

#INES Header:
    HEADER: start = $0, size = $10, file = %O ,fill = yes;


#ROM Addresses:
    ROM_M_00: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $00;
    ROM_M_01: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $01;
    ROM_M_02: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $02;
    ROM_M_03: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $03;
    ROM_M_04: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $04;
    ROM_M_05: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $05;
    ROM_M_06: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $06;
    ROM_M_07: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $07;
    ROM_M_08: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $08;
    ROM_M_09: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $09;
    ROM_M_0A: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $0a;
    ROM_M_0B: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $0b;
    ROM_M_0C: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $0c;
    ROM_M_0D: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $0d;
    ROM_M_0E: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $0e;
    ROM_M_0F: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $0f;
    ROM_M_10: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $10;
    ROM_M_11: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $11;
    ROM_M_12: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $12;
    ROM_M_13: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $13;
    ROM_M_14: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $14;
    ROM_M_15: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $15;
    ROM_M_16: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $16;
    ROM_M_17: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $17;
    ROM_M_18: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $18;
    ROM_M_19: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $19;
    ROM_M_1A: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $1a;
    ROM_M_1B: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $1b;
    ROM_M_1C: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $1c;
    ROM_M_1D: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $1d;
    ROM_M_1E: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $1e;
    ROM_M_1F: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $1f;
    ROM_M_20: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $20;
    ROM_M_21: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $21;
    ROM_M_22: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $22;
#    ROM_M_23: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $23;
    ROM_M_PCM_B: start = $a000,  size = $4000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $23;
    #ROM_M_24: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $24;
 #   ROM_M_25: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $25;
    ROM_M_PCM: start = $a000,  size = $e000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $25;
#   ROM_M_26: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $26;
#   ROM_M_27: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $27;
#    ROM_M_28: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $28;
#  ROM_M_29: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $29;
 #  ROM_M_2A: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $2a;
 #   ROM_M_2B: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $2b;
    ROM_M_2C: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $2c;
    ROM_M_2D: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $2d;
    ROM_M_2E: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $2E;
    ROM_M_2F: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $2F;
    ROM_M_30: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $30;
    ROM_M_31: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $31;
    ROM_M_32: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $32;
    ROM_M_33: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $33;
    ROM_M_34: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $34;
    ROM_M_35: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $35;
    ROM_M_36: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $36;
    ROM_M_37: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $37;
    ROM_M_38: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $38;
    ROM_M_39: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $39;
    ROM_M_3A: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $3a;
    ROM_M_3B: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $3b;
    ROM_M_3C: start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $3c;
    ROM_M_3D: start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $3d;
    # MMC3 uses exclusively 8kb banks, so we have to break up the 16kb of fixed storage, too.
    PRG:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $00;
    PRG_2:  start = $e000, size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
 


#64 Banks of 8K CHR ROM
    GAMECHR: start = $0000, size = $1c000, file = %O, fill = yes;
    PARALLAXCHR: start = $0000, size = $24000, file = %O, fill = yes, bank = $70;
}




SEGMENTS {
    HEADER:   load = HEADER, type = ro, define = yes;
	COLLMAP0: load = WRAM,	 type = bss, start = $6000, define = yes;
	WRAM_SL0: load = WRAM,	 type = bss, start = $60F0, define = yes, optional = yes;
	COLLMAP1: load = WRAM,	 type = bss, start = $6100, define = yes;
	WRAM_SL1: load = WRAM,	 type = bss, start = $61F0, define = yes, optional = yes;
    COLLMAP2: load = WRAM,	 type = bss, start = $6200, define = yes;
	WRAM_SL2: load = WRAM,	 type = bss, start = $62F0, define = yes, optional = yes;
	COLLMAP3: load = WRAM,	 type = bss, start = $6300, define = yes;
	WRAM_SL3: load = WRAM,	 type = bss, start = $63F0, define = yes, optional = yes;
    SRAM:     load = WRAM,   type = rw,  align = $0100, define = yes;
    IRQ_T:    load = WRAM,   type = bss, start = $7FC0, define = yes;
    # Banks for mmc3 are split into two groups: 
    # A: The first 8kb section in memory
    # B: The second 8kb section in memory.
    # You can only put banks from section A into the first memory bank, and banks from section B into the second.
    LVL_BANK_00:   load = ROM_M_00, type = ro, optional = yes;
    LVL_BANK_01:   load = ROM_M_01, type = ro, optional = yes;
    LVL_BANK_02:   load = ROM_M_02, type = ro, optional = yes;
    LVL_BANK_03:   load = ROM_M_03, type = ro, optional = yes;
    LVL_BANK_04:   load = ROM_M_04, type = ro, optional = yes;
    LVL_BANK_05:   load = ROM_M_05, type = ro, optional = yes;
    LVL_BANK_06:   load = ROM_M_06, type = ro, optional = yes;
    LVL_BANK_07:   load = ROM_M_07, type = ro, optional = yes;
    LVL_BANK_08:   load = ROM_M_08, type = ro, optional = yes;
    LVL_BANK_09:   load = ROM_M_09, type = ro, optional = yes;
    LVL_BANK_0A:   load = ROM_M_0A, type = ro, optional = yes;
    LVL_BANK_0B:   load = ROM_M_0B, type = ro, optional = yes;
    LVL_BANK_0C:   load = ROM_M_0C, type = ro, optional = yes;
    LVL_BANK_0D:   load = ROM_M_0D, type = ro, optional = yes;
    LVL_BANK_0E:   load = ROM_M_0E, type = ro, optional = yes;
    LVL_BANK_0F:   load = ROM_M_0F, type = ro, optional = yes;
    LVL_BANK_10:   load = ROM_M_10, type = ro, optional = yes;
    LVL_BANK_11:   load = ROM_M_11, type = ro, optional = yes;
    LVL_BANK_12:   load = ROM_M_12, type = ro, optional = yes;
    LVL_BANK_13:   load = ROM_M_13, type = ro, optional = yes;  
    LVL_BANK_14:   load = ROM_M_14, type = ro, optional = yes;
    LVL_BANK_15:   load = ROM_M_15, type = ro, optional = yes;
    LVL_BANK_16:   load = ROM_M_16, type = ro, optional = yes;
    LVL_BANK_17:   load = ROM_M_17, type = ro, optional = yes;
    LVL_BANK_18:   load = ROM_M_18, type = ro, optional = yes;
    LVL_BANK_19:   load = ROM_M_19, type = ro, optional = yes;
    LVL_BANK_1A:   load = ROM_M_1A, type = ro, optional = yes;
    LVL_BANK_1B:   load = ROM_M_1B, type = ro, optional = yes;
    LVL_BANK_1C:   load = ROM_M_1C, type = ro, optional = yes;
    LVL_BANK_1D:   load = ROM_M_1D, type = ro, optional = yes;
    XCD_BANK_05:   load = ROM_M_1E, type = ro, optional = yes;
#    LVL_BANK_1F:   load = ROM_M_1F, type = ro, optional = yes;
    CHR_BANK_00:   load = ROM_M_1F, type = ro, optional = yes;
    CHR_BANK_01:   load = ROM_M_20, type = ro, optional = yes;
    CHR_BANK_02:   load = ROM_M_21, type = ro, optional = yes;
    CHR_BANK_03:   load = ROM_M_22, type = ro, optional = yes;
    PCM_BANK_B:   load = ROM_M_PCM_B, type = ro, optional = yes;
#   LVL_BANK_24:   load = ROM_M_24, type = ro, optional = yes;
#   LVL_BANK_25:   load = ROM_M_25, type = ro, optional = yes;
    PCM_BANK:      load = ROM_M_PCM, type = ro, optional = yes;
#   LVL_BANK_26:   load = ROM_M_26, type = ro, optional = yes;
#    LVL_BANK_27:   load = ROM_M_27, type = ro, optional = yes;
#    LVL_BANK_28:   load = ROM_M_28, type = ro, optional = yes;
    #LVL_BANK_29:   load = ROM_M_29, type = ro, optional = yes;
    #LVL_BANK_2A:   load = ROM_M_2A, type = ro, optional = yes;
    #LVL_BANK_2B:   load = ROM_M_2B, type = ro, optional = yes;
    #LVL_BANK_2C:   load = ROM_M_2C, type = ro, optional = yes;
    SFX_BANK:      load = ROM_M_2C, type = ro, optional = yes;
    XCD_BANK_04:   load = ROM_M_2D, type = ro, optional = yes;
    XCD_BANK_03:   load = ROM_M_2E, type = ro, optional = yes;
    XCD_BANK_02:   load = ROM_M_2F, type = ro, optional = yes;
    XCD_BANK_01:   load = ROM_M_30, type = ro, optional = yes;
    XCD_BANK_00:   load = ROM_M_31, type = ro, optional = yes;
    MUS_BANK_00:   load = ROM_M_32, type = ro, optional = yes;
    MUS_BANK_01:   load = ROM_M_33, type = ro, optional = yes;
    MUS_BANK_02:   load = ROM_M_34, type = ro, optional = yes;
    MUS_BANK_03:   load = ROM_M_35, type = ro, optional = yes;
    MUS_BANK_04:   load = ROM_M_36, type = ro, optional = yes;
    MUS_BANK_05:   load = ROM_M_37, type = ro, optional = yes;
    SPR_BANK_00:   load = ROM_M_38, type = ro, optional = yes;
    SPR_BANK_01:   load = ROM_M_39, type = ro, optional = yes;
    SPR_BANK_02:   load = ROM_M_3A, type = ro, optional = yes;
    SPR_BANK_03:   load = ROM_M_3B, type = ro, optional = yes;
    DMC_BANK_00:   load = ROM_M_3C, type = ro, align = $40;
    DMC_BANK_01:   load = ROM_M_3D, type = ro, align = $40;
    
    # Fixed banks
    CODE:     load = PRG, type = ro, define = yes, optional = yes;
    RODATA:   load = PRG, type = ro, define = yes, optional = yes;
    DATA:     load = ROM_M_30, run = RAM, type = rw, define = yes, optional = yes;
    OAMALIGN: load = PRG_2, type = ro, define = yes, start = $e000;
    STARTUP:  load = PRG_2, type = ro, define = yes;
    NESLIB:   load = PRG_2, type = ro, define = yes;
    NESDOUG:  load = PRG_2, type = ro, define = yes;
	SND_DRV:  load = PRG_2, type = ro, define = yes;
    CODE_2:   load = PRG_2, type = ro, define = yes, optional = yes;
    RODATA_2: load = PRG_2, type = ro, define = yes, optional = yes;
	VECTORS:  load = PRG_2, start = $fffa, type = ro;

    GAMECHR:      load = GAMECHR, type = ro;
    PARALLAXCHR:  load = PARALLAXCHR, type = ro;

    BSS:      load = RAM,            type = bss, define = yes;
    ZEROPAGE: load = ZP,             type = zp;
	
}




#removed CONDES features




SYMBOLS {
    MAPPER:         type = weak, value = 4;     # 4 = MMC3
    SUBMAPPER:      type = weak, value = 0;     # Standard
    MIRRORING:      type = weak, value = 8;     # 0, 1 = doesn't matter (its an MMC3 register), 8 = hardwired 4-screen 
    PRG_BANK_COUNT: type = weak, value = 32;    # 16k PRG chunk count
    CHR_BANK_COUNT: type = weak, value = 32;    # 8k CHR chunk count
    SRAM:           type = weak, value = 1;     # 1 = battery backed SRAM at $6000-7FFF
    TRAINER:        type = weak, value = 0;     # unneeded
    CONSOLE_TYPE:   type = weak, value = 0;     # Standard NES/Famicom
    PRG_RAM_COUNT:  type = weak, value = 0;     # None (it's all non-volatile)
    PRG_NVRAM_COUNT:type = weak, value = 7;     # 64 << 7 = 8K
    CHR_RAM_COUNT:  type = weak, value = 0;     # None
    CHR_NVRAM_COUNT:type = weak, value = 0;     # 
    CPU_PPU_TIMING: type = weak, value = 2;     # Multiregion
    HARDWARE_TYPE:  type = weak, value = 0;     # Unused
    MISC_ROMS:      type = weak, value = 0;     # No misc ROMs
    DEF_EXP_DEVICE: type = weak, value = 0;     # Unspecified

    FIRST_MUSIC_BANK:   type = weak, value = $32;
    # FIRST_SPRITE_BANK:  type = weak, value = 27;
    FIRST_DMC_BANK:     type = weak, value = $3C;

    __DATA_LOAD_BANK__: type = export, value = $30;
}

