#	This file is taken by a python script and compiled into tables for each value
#	Line format:
#	type {optional settings} [flags] name values
#		or
#	command arguments
#	Types:
#		int: The values are stored as integer values, size determined automatically or defined later
#		fxp[X]: The values are stored as inf.X bit fixed point values
#	Optional settings:
#		have the form {marker}={value} or {marker}
#		sz: Forced size of the variable in bits
#		pw: Power of the framerate to multiply the value with
#			(examples: 	1 if the value is in s (duration),
#						-1 if the value is in 1/s (velocity), 
#						-2 if the value is in 1/(s^2) (acceleration))
#			If not specified or zero the value doesn't depend on the framerate
#		time: Sets power to 1
#		vel: Sets power to -1
#		accel: Sets power to -2
#		tbl: Compiles the following numbers into a table per setting, and then a table of tables
#		uninum: Numbers are stored as one array of uint8/16/32_t as opposed to hi/lo arrays
#			This way is faster when using tables (only one pointer to load as opposed to multiple)
#		be: When using uninum, numbers are stored in big-endian order as opposed to little-endian
#		ef: Values are defined as absolute values (not assuming that the NTSC framerate is exactly 60Hz)
#	Flags:
#		g - The values are flipped when gravity is reversed
#		m - 2 values are defined - one for normal and one for mini
#	Name: literally just alphanumeric characters
#			each table will be exported under this exact name
#	Values: int(s) or float(s), processed per the flags and then rounded
#	
#	Commands:
#		segment: sets the segment for the following data
#		Arguments: the bank to set, set to RODATA in the beginning

int [m] CUBE_WIDTH 0x0F 0x08
int [m] CUBE_HEIGHT 0x0F 0x07

int [] WAVE_WIDTH 0x08
int [] WAVE_HEIGHT 0x08

fxp8 tbl uninum be vel [] CUBE_SPEED {
	166.0181582 133.8912134 206.4516129 249.5126706 306.9544365 85.78125 # 1, .5, 2, 3, 4, Slow
}

segment XCD_BANK_06
# the big ass orb table

fxp8 tbl uninum be vel [gm] sprite_gamemode_adjust_heights {
# big size
#    cube       ship       ball       ufo        robot      spider    wv  swing
	-333.75000 -258.75000 -243.75000 -221.25000 -333.75000 -255.00000  0 -217.50000
	-465.00000 -225.00000 -296.25000 -191.25000 -521.25000 -300.00000  0 -258.75000
	-228.75000 -120.00000 -191.25000 -127.50000 -258.75000 -198.75000  0 -168.75000
	-303.75000 -146.25000 -202.50000 -138.75000 -318.75000 -198.75000  0 -202.50000
	-438.75000 -348.75000 -318.75000 -303.75000 -438.75000 -300.00000  0 -288.75000
	-333.75000 -333.75000 -348.75000 -333.75000 -333.75000 -333.75000  0 -348.75000
	 573.75000  573.75000  566.25000  573.75000  573.75000  573.75000  0  566.25000
	-315.00000 -315.00000 -266.71875 -281.25000 -446.25000 -281.25000  0 -266.71875
	-596.25000 -367.50000 -371.25000 -240.00000 -618.75000 -393.75000  0 -382.50000
# mini
#    cube       ship       ball       ufo        robot      spider    wv  swing
	-288.75000 -277.50000 -258.75000 -228.75000 -266.25000 -198.75000  0 -157.50000
	-390.00000 -251.25000 -288.75000 -217.50000 -431.25000 -240.00000  0 -195.00000
	-198.75000 -112.50000 -198.75000 -101.25000 -206.25000 -131.25000  0 -116.25000
	-236.25000 -112.50000 -213.75000  -78.75000 -198.75000 -198.75000  0 -127.50000
	-378.75000 -386.25000 -300.00000 -318.75000 -378.75000 -266.25000  0 -198.75000
	-333.75000 -333.75000 -322.50000 -333.75000 -333.75000 -333.75000  0 -322.50000
	 573.75000  573.75000  566.25000  573.75000  573.75000  573.75000  0  566.25000
	-315.00000 -315.00000 -266.71875 -281.25000 -446.25000 -281.25000  0 -266.71875
	-491.25000 -405.00000 -341.25000 -318.75000 -528.75000 -318.75000  0 -217.50000
}

segment XCD_BANK_00

fxp8 vel [g] PAD_HEIGHT_BLUE 217.5
fxp8 vel [g] ORB_BALL_HEIGHT_BLUE 97.5
fxp8 vel [] POS_DUAL_CAP_CHECK 138.75
fxp8 vel [] NEG_DUAL_CAP_CHECK -138.75

segment XCD_BANK_01

fxp8 vel [gm] JUMP_VEL -333.75 -288.75
fxp8 vel [gm] BALL_SWITCH_VEL 120 67.5
fxp8 vel [gm] UFO_JUMP_VEL -191.25 -168.75
fxp8 vel [g] ROBOT_JUMP_VEL -161.25

int time [] ROBOT_JUMP_TIME 0.32

fxp8 vel [g] CUBE_MAX_FALLSPEED 360.0
fxp8 vel [g] SHIP_MAX_FALLSPEED 210.0
fxp8 vel [g] BALL_MAX_FALLSPEED 360.0
fxp8 vel [gm] UFO_MAX_FALLSPEED 187.5 198.75
fxp8 vel [g] SPIDER_MAX_FALLSPEED 360.0
fxp8 vel [g] SWING_MAX_FALLSPEED 251.25

segment XCD_BANK_04

fxp8 vel [] SHIP_SCROLL_SPEED 120

segment RODATA

fxp8 accel sz=16 [gm] CUBE_GRAVITY 1504.6875 1560.9375
fxp8 accel sz=16 [gm] SHIP_GRAVITY 590.625 618.75
# = SHIP_GRAVITY * 6 / 5
fxp8 accel sz=16 [gm] SHIP_GRAVITY_UP 708.75 742.5
fxp8 accel sz=16 [gm] BALL_GRAVITY 998.4375 1223.4375
fxp8 accel sz=16 [g] UFO_GRAVITY 703.125
fxp8 accel sz=16 [g] SPIDER_GRAVITY 1054.6875
fxp8 accel sz=16 [gm] SWING_GRAVITY 703.125 787.5


fxp8 vel [] JIMSHEATBALL_MAX_FALLSPEED 180.0
fxp8 accel sz=16 [] JIMSHEATBALL_GRAVITY 731.25
fxp8 vel [] JIMSHEATBALL_JUMP_VEL -213.75
# literally the above / 4 * 7
fxp8 vel [] JIMSHEATBALL_JUMP_VEL_d4x7 -374.0625

fxp8 vel [g] MAKE_CUBE_JUMP_HIGHER -30

fxp8 vel sz=16 [g] EXIT_SLOPE_BALL_22 -18.75
#intentionally inverted
fxp8 vel [g] EXIT_SLOPE_BALL_66 78.75
fxp8 vel [g] EXIT_SLOPE_CUBE_22 -60

fxp8 vel [g] DASH_END_VEL_RESET 60
